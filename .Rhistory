min_v <- summarise(df, mean_mpg = floor(min(!!response))) |> pull()
sample_sizes <- df |>
group_by(!!group) |>
tally() |>
mutate(n = paste0('n = ', n))
ufo_boxplot <- ggplot(df, aes(x = !!group, y = !!response, colour = !!group),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = 1, outlier.alpha = 0.4, outlier.colour = 'black') +
geom_text(data = sample_sizes,
aes(!!group, Inf, label = n), color = 'black',
vjust = "inward", size = 3,
y = min_v * 0.95) +
stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25) +
stat_compare_means(label.y = min_v * 0.85)  +
theme_boxplot() +
scale_colour_manual(values = col_pal) +
theme(legend.position = 'none')
return(ufo_boxplot)
}
#' @param col_pal - color palette e.g. 'strata_pal', or 'lifeform_pal'
#' @param group - relevant grouping variables - expects character categorical
#' @return a ggplot with the option to refine contents.
#' @example strata_pal_test <- c("setosa" = "#4A5A28",
#' "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
#' iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
#'                     group = Species, col_pal = strata_pal_test)
#' plot(iris_box) + labs(title = 'Comparision of Sepal Length in Iris Species')
#' @export
#' @seealso theme_boxplot
boxplot_drawer <- function(df, response, col_pal, group){
term <- as.formula(paste(rlang::expr(response), " ~ ", rlang::expr(group)))
response <- rlang::enquo(response)
group <- rlang::enquo(group)
my_means <- ggpubr::compare_means(term,  data = df)
my_comparisons <- my_means |>
nest(groups = c(group1, group2)) |>
pull(groups) |>
map(., as.character)
min_v <- summarise(df, mean_mpg = floor(min(!!response))) |> pull()
sample_sizes <- df |>
group_by(!!group) |>
tally() |>
mutate(n = paste0('n = ', n))
ufo_boxplot <- ggplot(df, aes(x = !!group, y = !!response, colour = !!group),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = 1, outlier.alpha = 0.4, outlier.colour = 'black') +
geom_text(data = sample_sizes,
aes(!!group, Inf, label = n), color = 'black',
vjust = "inward", size = 3,
y = min_v * 0.95) +
stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25) +
stat_compare_means(label.y = min_v * 0.85)  +
theme_boxplot() +
scale_colour_manual(values = col_pal) +
theme(legend.position = 'none')
return(ufo_boxplot)
}
strata_pal_test <- c("setosa" = "#4A5A28", "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
group = Species, col_pal = strata_pal_test)
#' @param col_pal - color palette e.g. 'strata_pal', or 'lifeform_pal'
#' @param group - relevant grouping variables - expects character categorical
#' @return a ggplot with the option to refine contents.
#' @example strata_pal_test <- c("setosa" = "#4A5A28",
#' "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
#' iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
#'                     group = Species, col_pal = strata_pal_test)
#' plot(iris_box) + labs(title = 'Comparision of Sepal Length in Iris Species')
#' @export
#' @seealso theme_boxplot
boxplot_drawer <- function(df, response, col_pal, group){
term <- as.formula(paste(rlang::expr(response), " ~ ", rlang::expr(group)))
response <- rlang::enquo(response)
group <- rlang::enquo(group)
my_means <- ggpubr::compare_means(term,  data = df)
my_comparisons <- my_means |>
purrr::nest(groups = c(group1, group2)) |>
dplyr::pull(groups) |>
purrr::map(., as.character)
min_v <- summarise(df, mean_mpg = floor(min(!!response))) |> pull()
sample_sizes <- df |>
group_by(!!group) |>
tally() |>
mutate(n = paste0('n = ', n))
ufo_boxplot <- ggplot(df, aes(x = !!group, y = !!response, colour = !!group),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = 1, outlier.alpha = 0.4, outlier.colour = 'black') +
geom_text(data = sample_sizes,
aes(!!group, Inf, label = n), color = 'black',
vjust = "inward", size = 3,
y = min_v * 0.95) +
stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25) +
stat_compare_means(label.y = min_v * 0.85)  +
theme_boxplot() +
scale_colour_manual(values = col_pal) +
theme(legend.position = 'none')
return(ufo_boxplot)
}
strata_pal_test <- c("setosa" = "#4A5A28", "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
group = Species, col_pal = strata_pal_test)
#'     response_cat = response,
#'     grp1 = spray, grp2 = year,
#'     rowN = 2,
#'     fill_vals =  c('dead', 'live'),
#'     fill_cols = c('#91A4C3', '#C3B091')) +
#'     labs(title = 'Effect of Insecticides on Insect Mortality') # note you
#'     # can just add elements onto the function in line.
#'
#' @export
#' @rdname UFO_EoS
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha, fill_vals, fill_cols, rowN){
if(missing(alpha)) {
alpha = 0.2
}
names(fill_cols) <- fill_vals
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
dplyr::group_by(!!grp1, !!grp2, !!response_cat) %>%
dplyr::mutate(grp_total = sum(!!response_val)) %>%
dplyr::add_count(name = 'no_obs') %>%
dplyr::mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(!!grp1, !!grp2, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
# style the labels
#  data <- data %>%
#    dplyr::mutate(dplyr::across(.cols = c(!!response_cat,
#                                          !!grp1, !!grp2), ~ str_to_sentence(.x)))
# CAPITALIE THE VAR NAMES - PULL AND PLOT DIRECTLY REED !
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = rowN) +
geom_linerange(data = CInterval_upper,
aes(x = !!grp1, ymin = pl_bar, ymax = pu_bar),
colour="black", alpha = 0.9) +
geom_linerange(data = CInterval_lower,
aes(x = !!grp1, ymin = ll_bar, ymax = lu_bar),
colour="black", alpha = 0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
scale_fill_manual(values = fill_cols)
return(myplot)
}
is <- InsectSprays %>%
mutate(
ID = 1:n(), .before = count) %>%
mutate(
year = rep(2021:2022, times = 6, each = 6),
dead = floor(runif(n(), min=0, max=count)),
live = count - dead) %>%
pivot_longer(cols = dead:live, values_to = 'tot_count', names_to = 'response')
head(is)
#' response_cat = response,
#' grp1 = spray, grp2 = year, rowN = 1,
#' fill_vals =  c('dead', 'live', 'instar'),
#' fill_cols = c('#91A4C3', '#C3B091', '#183A91')) +
#'  labs(title = 'Effect of Insecticides on Insect Mortality') +
#'  theme_bw()
#'
#' @export
#' @rdname UFO_EoS
#'
dodged_drawer <- function(data, response_val, response_cat, grp1, grp2,
fill_vals, fill_cols, alpha, rowN,
minCIv, maxCIv, dodgeV, errorT, errorW){
names(fill_cols) <- fill_vals
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
if(missing(errorW)){errorW <- 0.3}
if(missing(errorT)){errorT <- 0.5}
if(missing(alpha)){alpha <- 1-0.2} else {alpha <- 1 - alpha}
if(missing(rowN)){rowN <- 1}
if(missing(minCIv)){minCIv <- -Inf}
if(missing(maxCIv)){maxCIv <- Inf}
if(missing(dodgeV)){dodgeV <- 1}
sumSE <- Rmisc::summarySE(data, measurevar = quo_name(response_val),
groupvars = c(quo_name(grp1), quo_name(grp2),
quo_name(response_cat)),
conf.interval = alpha) %>%
dplyr::mutate(ci_low = !!response_val - ci,
ci_high = !!response_val + ci,
ci_low = if_else(ci_low < minCIv, 0, ci_low),
ci_high = if_else(ci_low > maxCIv, 100, ci_high))
dodge <- position_dodge(width = dodgeV)
myplot <- ggplot(sumSE,
aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_col(position = dodge, stat = "identity") +
theme(strip.background = element_blank() ) +
scale_fill_manual(values = fill_cols) +
facet_wrap(vars(!!grp2), nrow = rowN) +
geom_errorbar(aes(ymin = ci_low, ymax = ci_high),
width = errorW, position = dodge, alpha = errorT
) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))
return(myplot)
}
p <- stacked_prop_drawer(data = is, response_val = tot_count,
response_cat = response,   grp1 = spray, grp2 = year,
rowN = 2,
fill_vals =  c('dead', 'live'),
fill_cols = c('#91A4C3', '#C3B091')) +
labs(title = 'Effect of Insecticides on Insect Mortality') # note you
plot(p)
p <- stacked_prop_drawer(data = is, response_val = tot_count,
response_cat = response,   grp1 = spray, grp2 = year,
rowN = 2,
fill_vals =  c('dead', 'live'),
fill_cols = c('#91A4C3', '#C3B091')) +
labs(title = 'Effect of Insecticides on Insect Mortality')
plot(p)
stacked_prop_drawer(data = is, response_val = tot_count,
response_cat = response,   grp1 = spray, grp2 = year,
rowN = 2,
fill_vals =  c('dead', 'live'),
fill_cols = c('#91A4C3', '#C3B091')) +
labs(title = 'Effect of Insecticides on Insect Mortality')
is <- InsectSprays %>%
mutate(
ID = 1:n(), .before = count) %>%
mutate(
year = rep(2021:2022, times = 6, each = 6),
dead = floor(runif(n(), min=0, max=count)),
live = count - dead) %>%
pivot_longer(cols = dead:live, values_to = 'tot_count', names_to = 'response')
rm(p)
stacked_prop_drawer(data = is, response_val = tot_count,
response_cat = response,   grp1 = spray, grp2 = year,
rowN = 2,
fill_vals =  c('dead', 'live'),
fill_cols = c('#91A4C3', '#C3B091')) +
labs(title = 'Effect of Insecticides on Insect Mortality')
#'     response_cat = response,
#'     grp1 = spray, grp2 = year,
#'     rowN = 2,
#'     fill_vals =  c('dead', 'live'),
#'     fill_cols = c('#91A4C3', '#C3B091')) +
#'     labs(title = 'Effect of Insecticides on Insect Mortality') # note you
#'     # can just add elements onto the function in line.
#'
#' @export
#' @rdname UFO_EoS
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha, fill_vals, fill_cols, rowN){
if(missing(alpha)) {
alpha = 0.2
}
names(fill_cols) <- fill_vals
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
dplyr::group_by(!!grp1, !!grp2, !!response_cat) %>%
dplyr::mutate(grp_total = sum(!!response_val)) %>%
dplyr::add_count(name = 'no_obs') %>%
dplyr::mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(!!grp1, !!grp2, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
# style the labels
#  data <- data %>%
#    dplyr::mutate(dplyr::across(.cols = c(!!response_cat,
#                                          !!grp1, !!grp2), ~ str_to_sentence(.x)))
# CAPITALIE THE VAR NAMES - PULL AND PLOT DIRECTLY REED !
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = rowN) +
geom_linerange(data = CInterval_upper,
aes(x = !!grp1, ymin = pl_bar, ymax = pu_bar),
colour="black", alpha = 0.9) +
geom_linerange(data = CInterval_lower,
aes(x = !!grp1, ymin = ll_bar, ymax = lu_bar),
colour="black", alpha = 0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
scale_fill_manual(values = fill_cols)
return(myplot)
}
#' @export
#' @rdname UFO_EoS
theme_prop_bar <- function(){
font = "sans"   #assign font family up front
base_size = 12
legend.position = 'none'
theme_classic() %+replace%    #replace elements we want to change
theme(
#grid elements
axis.ticks = element_blank(),          #strip axis ticks
#text elements
plot.title = element_text(  #title
family = font,            #set font family
size = 16,                #set font size
face = 'bold',            #bold typeface
hjust = 0.5,              #center
vjust = 2),               #move title up
plot.subtitle = element_text(#subtitle
family = font,
size = 14),
plot.caption = element_text(#caption
family = font,
size = 9,
hjust = 1),               #right align
axis.title = element_text(  #axis titles
family = font),
axis.title.x = element_text(
hjust = 0.5, vjust = 4), #center
axis.text = element_text(   #axis text
family = font,
size = 9),
axis.text.x = element_text( #margin for axis text
margin=margin(5, b = 10),
vjust = 7.5),
strip.text = element_text(
size = 12, color = "black", face = "bold"
),
axis.line = element_blank(),
legend.position = 'bottom'
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
is <- InsectSprays %>%
mutate(
ID = 1:n(), .before = count) %>%
mutate(
year = rep(2021:2022, times = 6, each = 6),
dead = floor(runif(n(), min=0, max=count)),
live = count - dead) %>%
pivot_longer(cols = dead:live, values_to = 'tot_count', names_to = 'response')
head(is)
stacked_prop_drawer(data = is, response_val = tot_count,
response_cat = response,   grp1 = spray, grp2 = year,
rowN = 2,
fill_vals =  c('dead', 'live'),
fill_cols = c('#91A4C3', '#C3B091')) +
labs(title = 'Effect of Insecticides on Insect Mortality')
#' @export
#' @rdname UFO_EoS
theme_prop_bar <- function(){
font = "sans"   #assign font family up front
base_size = 12
legend.position = 'none'
theme_classic() %+replace%    #replace elements we want to change
theme(
#grid elements
axis.ticks = element_blank(),          #strip axis ticks
#text elements
plot.title = element_text(  #title
family = font,            #set font family
size = 16,                #set font size
face = 'bold',            #bold typeface
hjust = 0.5,              #center
vjust = 2),               #move title up
plot.subtitle = element_text(#subtitle
family = font,
size = 14),
plot.caption = element_text(#caption
family = font,
size = 9,
hjust = 1),               #right align
axis.title = element_text(  #axis titles
family = font),
axis.title.x = element_text(
hjust = 0.5, vjust = 4), #center
axis.text = element_text(   #axis text
family = font,
size = 9),
axis.text.x = element_text( #margin for axis text
margin=margin(5, b = 10),
vjust = 7.5),
strip.text = element_text(
size = 12, color = "black", face = "bold"
),
axis.line = element_blank(),
legend.position = 'bottom'
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
#'     response_cat = response,
#'     grp1 = spray, grp2 = year,
#'     rowN = 2,
#'     fill_vals =  c('dead', 'live'),
#'     fill_cols = c('#91A4C3', '#C3B091')) +
#'     labs(title = 'Effect of Insecticides on Insect Mortality') # note you
#'     # can just add elements onto the function in line.
#'
#' @export
#' @rdname UFO_EoS
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha, fill_vals, fill_cols, rowN){
if(missing(alpha)) {
alpha = 0.2
}
names(fill_cols) <- fill_vals
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
dplyr::group_by(!!grp1, !!grp2, !!response_cat) %>%
dplyr::mutate(grp_total = sum(!!response_val)) %>%
dplyr::add_count(name = 'no_obs') %>%
dplyr::mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(!!grp1, !!grp2, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
# style the labels
#  data <- data %>%
#    dplyr::mutate(dplyr::across(.cols = c(!!response_cat,
#                                          !!grp1, !!grp2), ~ str_to_sentence(.x)))
# CAPITALIE THE VAR NAMES - PULL AND PLOT DIRECTLY REED !
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = rowN) +
geom_linerange(data = CInterval_upper,
aes(x = !!grp1, ymin = pl_bar, ymax = pu_bar),
colour="black", alpha = 0.9) +
geom_linerange(data = CInterval_lower,
aes(x = !!grp1, ymin = ll_bar, ymax = lu_bar),
colour="black", alpha = 0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
scale_fill_manual(values = fill_cols)
return(myplot)
}
is <- InsectSprays %>%
mutate(
ID = 1:n(), .before = count) %>%
mutate(
year = rep(2021:2022, times = 6, each = 6),
dead = floor(runif(n(), min=0, max=count)),
live = count - dead) %>%
pivot_longer(cols = dead:live, values_to = 'tot_count', names_to = 'response')
head(is)
stacked_prop_drawer(data = is, response_val = tot_count,
response_cat = response,   grp1 = spray, grp2 = year,
rowN = 2,
fill_vals =  c('dead', 'live'),
fill_cols = c('#91A4C3', '#C3B091')) +
labs(title = 'Effect of Insecticides on Insect Mortality')
stacked_prop_drawer(data = is, response_val = tot_count,
response_cat = response,   grp1 = spray, grp2 = year,
rowN = 2,
fill_vals =  c('dead', 'live'),
fill_cols = c('#91A4C3', '#C3B091')) +
labs(title = 'Effect of Insecticides on Insect Mortality')
View(is)
