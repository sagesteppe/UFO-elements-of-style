pred_4 <- predict(pred_stack, model_4, type="response"),
pred_16 <- predict(pred_stack, model_14, type="response"),
pred_18 <- predict(pred_stack, model_16, type="response")
)
# plot(top_pred_r)
# create a simple ensemble, by calculating the mean of each top model
top_pred_r <- weighted.mean(top_pred_r, w = stacked_model$msTable$weight)
# plot(top_pred_r)
rm(model_6, model_8, model_2, model_4, model_16, model_14, oop, pred_16,
pred_2, pred_4, pred_6, pred_8, pred_18, model_terms)
rm(fqa_rast_vals, optimal_models, pred_stack, x_rast, y_rast, fqi_weights,
elev_90, popDen, patch, roadDist, fqa_results_V)
p2carto <- '../../UFO_cartography'
vector_data <- list.files(p2carto, recursive = T, pattern = 'shp$')
ufo_land <- vect(file.path(p2carto, vector_data[grep('*Surface*', vector_data)])) |>
aggregate()
top_pred_crop <- crop(top_pred_r, ufo_land, mask = T, overwrite = T,
filename = '../results/predicted_FQI_noXY.tif')
top_pred_crop <- crop(top_pred_r, ufo_land, mask = T,
filename = '../results/predicted_FQI.tif')
top_pred_crop <- crop(top_pred_r, ufo_land, mask = T, overwrite= T,
filename = '../results/predicted_FQI.tif')
ggplot(top_pred_crop) +
geom_sf()
plot(top_pred_crop)
rm(ufo_land, p2carto, vector_datatop_pred_r, top_pred_crop)
gc()
library(sf)
library(tidyverse)
library(ggspatial)
library(terra)
library(ggnewscale)
library(cowplot)
p2carto <- '/media/sagesteppe/ExternalHD/UFO_cartography'
vector_data <- list.files(p2carto, recursive = T, pattern = 'shp$')
administrative_boundaries <- st_read(
file.path(p2carto, vector_data[grep('*admu_', vector_data)]), quiet = T)
padus <- st_read(
file.path(p2carto, vector_data[grep('PAD.*Fee*', vector_data)]), quiet = T)
mask <- st_read(
file.path(p2carto, vector_data[grep('*mask*', vector_data)]), quiet = T)
rivers <- st_read(
file.path(p2carto, vector_data[grep('*NHD_Rivers*', vector_data)]), quiet = T) %>%
st_zm()
bbox <- filter(administrative_boundaries, FIELD_O == 'UNCOMPAHGRE') %>%
st_bbox()
raster_data <- list.files(p2carto, recursive = T, pattern = 'tif$')
hill <- rast(
file.path(p2carto, raster_data[grep('Hill.*fine', raster_data)])
)
public_lands_pal <- setNames(
c( # colours
rgb(254, 230, 121, max = 255), # BLM
rgb(204, 235, 197, max = 255), # USFS
rgb(202, 189, 220, max = 255), # NPS
rgb(127, 204, 167, max = 255), # FWS
rgb(255, 255, 179, max = 255), # USBR
rgb(253, 180, 108, max = 255), # TRIB
rgb(251, 180, 206, max = 255), # DOD
rgb(228, 196, 159, max = 255), # OTHF
rgb(179, 227, 238, max = 255), # SLB
rgb(255, 255, 255, max = 255), # PVT
rgb(143, 181, 190, max = 255) # CITY CNTY
),
c( # names
'BLM', 'USFS', 'NPS', 'FWS', 'USBR', 'TRIB', 'DOD', 'OTHF', 'SLB', 'Private', 'Local-State')
)
setwd('/media/sagesteppe/ExternalHD/UFO_elements_of_style')
p2pd <- '/media/sagesteppe/ExternalHD/UFO_Plant_Diversity/results/'
fqi_plots <- st_read(
file.path(p2pd, 'FQI_values.shp') )
fqi_no_xy <- rast(
file.path(p2pd, 'predicted_FQI_noXY.tif')
)
bbox <- st_bbox(fqi_plots)
bbox <- st_bbox(
setNames(c(bbox['xmin'] - 2500, bbox['ymin'] - 2500, bbox['xmax'] + 2500,
bbox['ymax'] + 2500),
c('xmin', 'ymin', 'xmax', 'ymax' ))
)
st_crs(bbox) <- 26913
padus <- st_crop(padus, bbox)
hill <- crop(hill,  bbox)
hill <- aggregate(hill, 10)
hillshade <- as.data.frame(hill, xy = T)
fqi_noXY_prediction <- crop(fqi_no_xy, bbox)
fqi_pred_df_noXY <- as.data.frame(fqi_noXY_prediction, xy = T)
rivers <- st_crop(rivers, bbox)
mask <- st_crop(mask, bbox)
places <- tigris::places(state = 'CO') %>%
vect() %>%
project(., crs(fqi_no_xy)) %>%
crop(., ext(fqi_no_xy)) %>%
st_as_sf() %>%
st_point_on_surface() %>%
dplyr::select(NAME) %>%
filter(NAME %in% c('Nucla', 'Cedaredge', 'Montrose', 'Ridgway',
'Crawford', 'Paonia', 'Olathe'))
CO_roads <- tigris::roads(state = 'CO',
county = c('Montrose', 'Delta', 'Ouray',
'San Miguel', 'Mesa')) %>%
filter(RTTYP %in% c('U', 'S')) %>%
st_transform(st_crs(fqi_no_xy)) %>%
st_crop(., bbox) %>%
st_simplify() %>%
dplyr::select(geometry) %>%
st_cast('LINESTRING') %>%
st_as_sfc()
non_ufo_blm <-  st_crop(padus, bbox) %>%
filter(Own_Name %in% c( 'BLM')) %>%
st_intersection(., mask)
Pad <- st_crop(padus, bbox) %>%
filter(!Own_Name %in% c('LOC', 'JNT', 'TRIB', 'DOD', 'USBR', 'FWS', 'BLM')) %>%
bind_rows(., non_ufo_blm)
public_lands_pal1 <- public_lands_pal
names(public_lands_pal1)[11] <- 'Local-State'
plp <- public_lands_pal[c(unique(Pad$Own_Name))]
plp <- plp[order(names(plp))]
plp <- plp[!is.na(plp)]
fqi_plot <- ggplot() +
geom_raster(data = hillshade, aes(x = x, y = y, fill = lyr1),
interpolate = F)  +
scale_fill_gradient(low = "grey50", high = "grey100") +
guides(fill = 'none') +
theme_void(base_size = 9) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5, size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.5, 'cm'),
legend.spacing.y = unit(2, 'pt'),
legend.spacing.x = unit(5, 'pt'),
legend.text = element_text(size = 6,
margin = margin(l = 0, unit = "pt"))) +
ggnewscale::new_scale_fill() +
geom_sf(data = padus, aes(fill = Own_Name), alpha = 0.7, color = NA) +
scale_fill_manual('Land Owner', values = plp) +
ggnewscale::new_scale_fill() +
geom_sf(data = rivers, alpha = 0.5, color = 'blue') +
geom_sf(data = CO_roads, alpha = 0.5, color = 'black') +
geom_sf(data = mask, color = 'white', alpha = 0.5, lwd = 0) +
ggnewscale::new_scale_fill() +
geom_point(data = fqi_plots, aes(fill = mcoc_r, size = fqi_r,
geometry = geometry),
stat = "sf_coordinates", shape = 21) +
scale_fill_viridis_c('Mean C', option = "C",  direction = -1,
limits = c(1,7)) +
scale_size_binned('FQI') +
coord_sf(xlim = c(bbox['xmin'], bbox['xmax']),
ylim = c(bbox['ymin'], bbox['ymax'])) +
labs(title = 'Measured Floristic Quality') +
geom_sf_label(data = places, aes(label = NAME), inherit.aes = F,
alpha = 0.5, label.size  = NA) +
annotation_scale(location = "bl",
pad_x = unit(0.4, "in"), pad_y = unit(0.3, "in"),
width_hint = 0.2) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.3, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_minimal)
ggsave(fqi_plot, path = 'results/maps', device = 'png',
bg = 'transparent', filename = 'FQI-plots.png',
dpi = 300, width = 6, height = 6, units = "in")
rm(fqi_plot)
fqi_pred <- ggplot() +
geom_raster(data = hillshade, aes(x = x, y = y, fill = lyr1),
interpolate = F)  +
scale_fill_gradient(low = "grey50", high = "grey100") +
guides(fill = 'none') +
theme_void(base_size = 9) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5, size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.5, 'cm'),
legend.spacing.y = unit(2, 'pt'),
legend.spacing.x = unit(5, 'pt'),
legend.text = element_text(size = 6,
margin = margin(l = 0, unit = "pt"))) +
ggnewscale::new_scale_fill() +
geom_sf(data = Pad, aes(fill = Own_Name), alpha = 0.7, color = NA) +
scale_fill_manual('Land Owner', values = plp) +
ggnewscale::new_scale_fill() +
geom_raster(data = fqi_pred_df_noXY, aes(x = x, y = y, fill = sum),
interpolate = F) +
scale_fill_viridis_c('Mean C', option = "C",  direction = -1) +
geom_sf(data = rivers, alpha = 0.5, color = 'blue') +
geom_sf(data = CO_roads, alpha = 0.5, color = 'black') +
geom_sf(data = mask, color = 'white', alpha = 0.5, lwd = 0) +
coord_sf(xlim = c(bbox['xmin'], bbox['xmax']),
ylim = c(bbox['ymin'], bbox['ymax'])) +
labs(title = 'Predicted Floristic Quality') +
geom_sf_label(data = places, aes(label = NAME), inherit.aes = F,
alpha = 0.5, label.size  = NA) +
annotation_scale(location = "bl",
pad_x = unit(0.4, "in"), pad_y = unit(0.3, "in"),
width_hint = 0.2) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.3, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_minimal)
ggsave(fqi_pred, path = 'results/maps', device = 'png',
bg = 'transparent', filename = 'FQI-plots.png',
dpi = 300, width = 6, height = 6, units = "in")
ggsave(fqi_plot, path = 'results/maps', device = 'png',
bg = 'transparent', filename = 'FQI-plots.png',
dpi = 300, width = 6, height = 6, units = "in")
fqi_plot <- ggplot() +
geom_raster(data = hillshade, aes(x = x, y = y, fill = lyr1),
interpolate = F)  +
scale_fill_gradient(low = "grey50", high = "grey100") +
guides(fill = 'none') +
theme_void(base_size = 9) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5, size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.5, 'cm'),
legend.spacing.y = unit(2, 'pt'),
legend.spacing.x = unit(5, 'pt'),
legend.text = element_text(size = 6,
margin = margin(l = 0, unit = "pt"))) +
ggnewscale::new_scale_fill() +
geom_sf(data = padus, aes(fill = Own_Name), alpha = 0.7, color = NA) +
scale_fill_manual('Land Owner', values = plp) +
ggnewscale::new_scale_fill() +
geom_sf(data = rivers, alpha = 0.5, color = 'blue') +
geom_sf(data = CO_roads, alpha = 0.5, color = 'black') +
geom_sf(data = mask, color = 'white', alpha = 0.5, lwd = 0) +
ggnewscale::new_scale_fill() +
geom_point(data = fqi_plots, aes(fill = mcoc_r, size = fqi_r,
geometry = geometry),
stat = "sf_coordinates", shape = 21) +
scale_fill_viridis_c('Mean C', option = "C",  direction = -1,
limits = c(1,7)) +
scale_size_binned('FQI') +
coord_sf(xlim = c(bbox['xmin'], bbox['xmax']),
ylim = c(bbox['ymin'], bbox['ymax'])) +
labs(title = 'Measured Floristic Quality') +
geom_sf_label(data = places, aes(label = NAME), inherit.aes = F,
alpha = 0.5, label.size  = NA) +
annotation_scale(location = "bl",
pad_x = unit(0.4, "in"), pad_y = unit(0.3, "in"),
width_hint = 0.2) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.3, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_minimal)
ggsave(fqi_plot, path = 'results/maps', device = 'png',
bg = 'transparent', filename = 'FQI-plots.png',
dpi = 300, width = 6, height = 6, units = "in")
rm(fqi_plot)
fqi_pred <- ggplot() +
geom_raster(data = hillshade, aes(x = x, y = y, fill = lyr1),
interpolate = F)  +
scale_fill_gradient(low = "grey50", high = "grey100") +
guides(fill = 'none') +
theme_void(base_size = 9) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5, size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.5, 'cm'),
legend.spacing.y = unit(2, 'pt'),
legend.spacing.x = unit(5, 'pt'),
legend.text = element_text(size = 6,
margin = margin(l = 0, unit = "pt"))) +
ggnewscale::new_scale_fill() +
geom_sf(data = Pad, aes(fill = Own_Name), alpha = 0.7, color = NA) +
scale_fill_manual('Land Owner', values = plp) +
ggnewscale::new_scale_fill() +
geom_raster(data = fqi_pred_df_noXY, aes(x = x, y = y, fill = sum),
interpolate = F) +
scale_fill_viridis_c('Mean C', option = "C",  direction = -1) +
geom_sf(data = rivers, alpha = 0.5, color = 'blue') +
geom_sf(data = CO_roads, alpha = 0.5, color = 'black') +
geom_sf(data = mask, color = 'white', alpha = 0.5, lwd = 0) +
coord_sf(xlim = c(bbox['xmin'], bbox['xmax']),
ylim = c(bbox['ymin'], bbox['ymax'])) +
labs(title = 'Predicted Floristic Quality') +
geom_sf_label(data = places, aes(label = NAME), inherit.aes = F,
alpha = 0.5, label.size  = NA) +
annotation_scale(location = "bl",
pad_x = unit(0.4, "in"), pad_y = unit(0.3, "in"),
width_hint = 0.2) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.3, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_minimal)
ggsave(fqi_pred, path = 'results/maps', device = 'png',
bg = 'transparent', filename = 'FQI-prediction.png',
dpi = 300, width = 6, height = 6, units = "in")
gc()
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.align="left")
library(sf)
library(tidyverse)
library(ggpubr)
library(spsurvey)
source('functions.R')
mcoc <- function(x){sum(x)/length(x)}
fqi <- function(x){sum(x)/length(x) * sqrt(length(x))}
rm(convex_hull_resample)
praw <- '../data/raw'
ppro <- '../data/processed'
f <- list.files(praw, pattern = 'csv')
fp <- list.files(ppro, pattern = 'csv')
spp_richness <- read.csv(file.path(praw, f[grep('SpeciesRichness[.]', f)])) %>%
dplyr::select(SpeciesList, PrimaryKey)
spp_r_header <- read.csv(file.path(praw, f[grep('RichnessHeader', f)])) %>%
dplyr::select(FormDate, Observer, PrimaryKey)
pts <- st_read(
'../../aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T) %>%
st_transform(26913) %>%
st_buffer(65) %>%
dplyr::select(PLOTID, STRATUM)
char <- read.csv(file.path(praw, f[grep('Characterization', f)] ) ) %>%
st_as_sf( coords = c('Longitude', 'Latitude'), crs = 4269) %>%
filter(str_detect(PrimaryKey, negate = T,
'Fuels|Bull-Draw|CO-NWD|_Tres_Rios|Grand_Junction|Gunnison|Moab|TRFO'),
str_detect(PlotID, '[A-Z]{2,3}-[0-9]{2,3}')) %>%
st_transform(26913) %>%
dplyr::select(PrimaryKey)
spp_richness <- st_intersection(pts, char)  %>%
left_join(., spp_r_header, by = 'PrimaryKey', multiple = "all") %>%
left_join(., spp_richness, by = 'PrimaryKey', multiple = "all") %>%
rename(SYMBOL_AIM = SpeciesList)  %>%
dplyr::select(PLOTID, STRATUM, SYMBOL_AIM, geometry)
no_records_full <- nrow(spp_richness)
rm(pts, char, spp_r_header)
# remove unknowns here, only 118 records total across 5 years, pretty impressive!
unks <- spp_richness %>%
filter(str_detect(SYMBOL_AIM, '^AG|^PG|^AF|^PF|^SH\\d+')) %>%
nrow()
spp_richness <- spp_richness %>%
filter(str_detect(SYMBOL_AIM, '^AG|^PG|^AF|^PF|^SH\\d+', negate = T))
# add on the official USDA codes to the AIM codes to sync up with CNHP
attributes <- read.csv(
file.path(ppro, fp[grep('Attribute.*Table-RCB', fp)]) ) %>%
dplyr::select(SYMBOL_AIM, SYMBOL_USDA) %>%
distinct(.keep_all = T)   # one duplicate in here somewhere!
spp_clean <- left_join(spp_richness, attributes, by = 'SYMBOL_AIM', multiple = "all") %>%
mutate(SYMBOL_USDA = if_else( is.na(SYMBOL_USDA), SYMBOL_AIM, SYMBOL_USDA))
cvals <- read.csv(file.path(ppro, fp[grep('C-Values', fp)])) %>%
dplyr::select(SYMBOL_USDA = National_USDASymbol, C.Val = FQA_C.Value2020_Numeric, Native = FQA_NativeStatus,
Ack_SciName_noAuthority)
spp_clean <- left_join(spp_clean, cvals, by = 'SYMBOL_USDA', multiple = "all") %>%
# due to multiple look ups we will remove duplicate records
group_by(PLOTID, SYMBOL_USDA) %>%
slice_sample(n = 1)
# spp_clean %>%  # check for duplicates here.
#  group_by(PLOTID, SYMBOL_USDA) %>%
#  filter(n() > 1)
no_CVAL_match <- filter(spp_clean, is.na(C.Val)) %>%
nrow()
spp_clean <- drop_na(spp_clean) %>%
group_by(PLOTID)
rm(cvals, attributes)
FQI_results <- spp_clean %>%
summarize(mcoc_r = mcoc(C.Val),
fqi_r = fqi(C.Val)) %>%
st_as_sf()
rm(fqi, mcoc)
lc_lkp <- read.csv(file.path(praw, f[grep('landcover', f)]) )  %>%
cbind(., RealStratum = c('MC', 'AS', 'MMS', 'PJ', 'SD', 'SS'))
r <- terra::rast('../../plot_post_stratification/data/processed/PredictedVegClass.tif')
pts <- FQI_results %>%
dplyr::select(PLOTID) %>%
terra::vect() %>%
terra::project(terra::crs(r))
reclass <- terra::extract(r, pts, method = 'simple', bind = T) %>%
as.data.frame() %>%
mutate(lyr1 = case_when(
PLOTID %in% c('SS-313-', 'PJ-143', 'PJ-153', 'PJ-164', 'SS-313') ~ 4,
PLOTID %in% c('AS-002', 'AS-004', 'MMS-097') ~ 3,
PLOTID %in% c('MC-068', 'AS-012') ~ 2,
PLOTID %in% c('SS-306') ~ 6,
TRUE ~ lyr1))
FQI_results <- left_join(FQI_results, reclass, by = 'PLOTID') %>%
left_join(., lc_lkp, by = c('lyr1' = 'layer')) %>%
dplyr::select(-lyr1) %>%
relocate(stratum, .before = geometry) %>%
st_as_sf() %>%
mutate(stratum = str_trim(stratum))
rm(r, pts, reclass, lc_lkp)
wghts <- read.csv( file.path(praw, f[grep('Weights', f)])) %>%
dplyr::select(WghtPerPlot, STRATUM = Stratum, AoInference = Area)
fqi_weights <- read.csv(file.path(praw, f[grep('Interence', f)])) %>%
dplyr::select(PLOTID = Plot.ID, AoInference, xcoord, ycoord) %>%
right_join(., FQI_results, by = 'PLOTID') %>%
rowwise() %>%
mutate(STRATUM = str_remove(str_extract(PLOTID, '^.*-'), '-')) %>%
left_join(., wghts, by = c('STRATUM','AoInference'))
rm(wghts)
fqi_weights_sub <- fqi_weights %>% filter(RealStratum != 'AS')
fqa_meds <- fqi_weights_sub %>%
group_by(RealStratum) %>%
summarize(med_C = median(mcoc_r),
mean_C = mean(mcoc_r))
rm(fqi_weights_sub, theme_boxplot, boxplot_drawer, strata_pal)
library(terra)
rp <- '../../AIM_Field_rasters'
rf <- list.files(rp, recursive = T, pattern = 'tif')
p2carto <- '../../UFO_cartography'
ext <- vect('../../UFO_cartography/UFO_mask/mask/mask.shp')
elev_90 <- rast(file.path(p2carto, list.files(p2carto, recursive = T, pattern = 'DEM.*tif')))
elev_90 <- crop(elev_90, ext)
popDen <- rast(file.path(rp, rf[grep( 'PopD.*resamp', rf)]))
roadDist <- rast(file.path(rp, rf[grep( 'RoadDistance', rf)]))
patch <- rast(file.path(rp, rf[grep( 'public_patchsize.tif', rf)]))
popDen <- crop(popDen, elev_90)
popDen <- resample(popDen, elev_90)
popDen[is.na(popDen[])] <- 0
patch <- crop(patch, elev_90)
patch <- resample(patch, elev_90)
roadDist <- crop(roadDist, elev_90)
roadDist <- resample(roadDist, elev_90)
# make X and Y coords explicit layers in the model.
x_rast <- rast(elev_90)
x_rast <- init(x_rast, "x")
y_rast <- rast(elev_90)
y_rast <- init(y_rast, "y")
pred_stack <- c(elev_90, popDen, patch, roadDist ) #,
#   x_rast, y_rast)
names(pred_stack) <- c('elevation', 'pop_density', 'patch_size', 'road_dist') #,
#   'xcoord', 'ycoord')
rm(ext)
# Run automated model selection
library(MuMIn)
library(usdm)
# check for correlation among the independent variables from 5000 random cells
corr_check_sample <- terra::spatSample(pred_stack, size = 5000, method = 'regular')
vif_results <-  usdm::vifstep(corr_check_sample, th=10)
# vif_results
rm(corr_check_sample, vif_results)
## extract values to AIM Plots
fqa_results_V <- FQI_results %>%
dplyr::select(PLOTID, mcoc_r) %>%
vect()
fqa_rast_vals <- extract(pred_stack, fqa_results_V,  bind = T) %>%
data.frame()
# pull off plotID
fqa_rast_vals <- dplyr::select(fqa_rast_vals, -PLOTID)
fqa_rast_vals <- fqa_rast_vals[complete.cases(fqa_rast_vals),]
## attempt to model FQA as a function of human disturbance, and elevation.
# this is the theoretical full model:
# glm(mcoc_r ~ road_dist * pop_density * patch_size * elevation * xcoord * ycoord, data = fqa_rast_vals)
oop <- options(na.action = "na.fail")
full_model <- glm(mcoc_r ~ ., data = fqa_rast_vals)
optimal_models <- dredge(full_model)
# optimal_models
# gather the actual terms from the top performing models, to see what worked.
model_terms <- get.models(optimal_models, subset = T)
# if top models have dAIC < 2.0, than 'stack' the models
stacked_model <- model.avg(optimal_models, subset = delta < 2.15, fit = T)
# these provides the estimates of our coefficients
# stacked_model$coefficients
# identify out top component models
# stacked_model
rm(full_model)
# we will create predictions from EACH model with dAIC < 2.0 and then take the m
# mean of each model
# model_terms[["6"]][["call"]]
# model_terms[["8"]][["call"]]
# model_terms[["2"]][["call"]]
# model_terms[["4"]][["call"]]
# model_terms[["14"]][["call"]]
# model_terms[["16"]][["call"]]
model_6 <- glm(formula = mcoc_r ~ elevation + pop_density + 1, data = fqa_rast_vals)
model_8 <- glm(formula = mcoc_r ~ elevation + patch_size + pop_density + 1, data = fqa_rast_vals)
model_2 <- glm(formula = mcoc_r ~ elevation + 1, data = fqa_rast_vals)
model_4 <- glm(formula = mcoc_r ~ elevation + patch_size + 1, data = fqa_rast_vals)
model_14 <- glm(formula = mcoc_r ~ elevation + pop_density + road_dist +  1, data = fqa_rast_vals)
model_16 <- glm(formula = mcoc_r ~ elevation + patch_size + pop_density + road_dist + 1, data = fqa_rast_vals)
top_pred_r <- c(
pred_6 <- predict(pred_stack, model_6, type="response"),
pred_8 <- predict(pred_stack, model_8, type="response"),
pred_2 <- predict(pred_stack, model_2, type="response"),
pred_4 <- predict(pred_stack, model_4, type="response"),
pred_16 <- predict(pred_stack, model_14, type="response"),
pred_18 <- predict(pred_stack, model_16, type="response")
)
# plot(top_pred_r)
# create a simple ensemble, by calculating the mean of each top model
top_pred_r <- weighted.mean(top_pred_r, w = stacked_model$msTable$weight)
# plot(top_pred_r)
# rm(model_6, model_8, model_2, model_4, model_16, model_14, oop, pred_16,
#   pred_2, pred_4, pred_6, pred_8, pred_18, model_terms)
summary(stacked_model)
sw(optimal_models)
summary(stacked_model)
plot(stacked_model, type="s")
plot(optimal_models, type="s")
plot(optimal_models)
, type="s"
plot(optimal_models, type="s")
plot(optimal_models)
plot(optimal_models, col = 2:6)
plot(optimal_models)
plot(optimal_models, col.mode = 1)
View(optimal_models)
270/4
plot(optimal_models, col.mode = 1)
full_model <- glm(mcoc_r ~ ., data = fqa_rast_vals)
optimal_models <- dredge(full_model, evaluate = T, rank = AICc)
optimal_models
summary(stacked_model)
8.704e-04
-6.339e-05
options(scipen = 999)
-6.339e-05
-1.484e-06
8.875e-06
plot(optimal_models, col.mode = 1)
gc()
gc()
