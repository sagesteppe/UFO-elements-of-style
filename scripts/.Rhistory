CInterval <- data %>%
group_by(!!grp1, !!grp2, !!response_cat) %>%
mutate(grp_total = sum(!!response_val)) %>%
add_count(name = 'no_obs') %>%
mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(spray, year, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = 1) +
geom_linerange(data = CInterval_upper,
aes(x=spray, ymin= pl_bar, ymax= pu_bar),
colour="black", alpha=0.9) +
geom_linerange(data = CInterval_lower,
aes(x=spray, ymin= ll_bar, ymax= lu_bar),
colour="black", alpha=0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
labs(title = ' this is a test') +
scale_fill_manual(values = c('dead' = '#91A4C3',
'live' = '#C3B091'))
return(myplot)
}
is <- InsectSprays %>%
mutate(
ID = 1:n(), .before = count) %>%
mutate(
year = rep(2021:2022, times = 6, each = 6),
dead = floor(runif(n(), min=0, max=count)),
live = count - dead) %>%
pivot_longer(cols = dead:live, values_to = 'tot_count', names_to = 'response')
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha){
#' this function serves to draw stacked proportion barcharts  for the UFO AIM
#' year analysis, these serve to show the sample size, and binomial breakdown
#' within the sample such as mortality. it inherits it's aesthetics from a
#' custom theme developed for this purpose 'theme_prop_bar'
#'
#' Inputs :
#' data - a data frame containing all variables for the plot
#' response_val - a numerical response.
#' response_cat - a category for the response
#' group1 - relevant grouping variable - e.g. 'treatment'
#' group2 - variable to facet by, e.g. year
#' alpha - alpha value for p-value, defauts to 0.2 for CI of 80%
if(missing(alpha)) {
alpha = 0.05
}
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
group_by(!!grp1, !!grp2, !!response_cat) %>%
mutate(grp_total = sum(!!response_val)) %>%
add_count(name = 'no_obs') %>%
mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(spray, year, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = 1) +
geom_linerange(data = CInterval_upper,
aes(x=spray, ymin= pl_bar, ymax= pu_bar),
colour="black", alpha=0.9) +
geom_linerange(data = CInterval_lower,
aes(x=spray, ymin= ll_bar, ymax= lu_bar),
colour="black", alpha=0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
labs(title = ' this is a test') +
scale_fill_manual(values = c('dead' = '#91A4C3',
'live' = '#C3B091'))
return(myplot)
}
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha){
#' this function serves to draw stacked proportion barcharts  for the UFO AIM
#' year analysis, these serve to show the sample size, and binomial breakdown
#' within the sample such as mortality. it inherits it's aesthetics from a
#' custom theme developed for this purpose 'theme_prop_bar'
#'
#' Inputs :
#' data - a data frame containing all variables for the plot
#' response_val - a numerical response.
#' response_cat - a category for the response
#' group1 - relevant grouping variable - e.g. 'treatment'
#' group2 - variable to facet by, e.g. year
#' alpha - alpha value for p-value, defauts to 0.2 for CI of 80%
if(missing(alpha)) {
alpha = 0.2
}
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
group_by(!!grp1, !!grp2, !!response_cat) %>%
mutate(grp_total = sum(!!response_val)) %>%
add_count(name = 'no_obs') %>%
mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(spray, year, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = 1) +
geom_linerange(data = CInterval_upper,
aes(x=spray, ymin= pl_bar, ymax= pu_bar),
colour="black", alpha=0.9) +
geom_linerange(data = CInterval_lower,
aes(x=spray, ymin= ll_bar, ymax= lu_bar),
colour="black", alpha=0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
labs(title = ' this is a test') +
scale_fill_manual(values = c('dead' = '#91A4C3',
'live' = '#C3B091'))
return(myplot)
}
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha){
#' this function serves to draw stacked proportion barcharts  for the UFO AIM
#' year analysis, these serve to show the sample size, and binomial breakdown
#' within the sample such as mortality. it inherits it's aesthetics from a
#' custom theme developed for this purpose 'theme_prop_bar'
#'
#' Inputs :
#' data - a data frame containing all variables for the plot
#' response_val - a numerical response.
#' response_cat - a category for the response
#' group1 - relevant grouping variable - e.g. 'treatment'
#' group2 - variable to facet by, e.g. year
#' alpha - alpha value for p-value, defauts to 0.2 for CI of 80%
if(missing(alpha)) {
alpha = 0.2
}
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
group_by(!!grp1, !!grp2, !!response_cat) %>%
mutate(grp_total = sum(!!response_val)) %>%
add_count(name = 'no_obs') %>%
mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(spray, year, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = 1) +
geom_linerange(data = CInterval_upper,
aes(x=spray, ymin= pl_bar, ymax= pu_bar),
colour="black", alpha=0.9) +
geom_linerange(data = CInterval_lower,
aes(x=spray, ymin= ll_bar, ymax= lu_bar),
colour="black", alpha=0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
labs(title = ' this is a test') +
scale_fill_manual(values = c('dead' = '#91A4C3',
'live' = '#C3B091'))
return(myplot)
}
is <- InsectSprays %>%
mutate(
ID = 1:n(), .before = count) %>%
mutate(
year = rep(2021:2022, times = 6, each = 6),
dead = floor(runif(n(), min=0, max=count)),
live = count - dead) %>%
pivot_longer(cols = dead:live, values_to = 'tot_count', names_to = 'response')
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
#' @export
#' @rdname UFO_EoS
theme_prop_bar <- function(){
font = "sans"   #assign font family up front
base_size = 12
legend.position = 'none'
theme_classic() %+replace%    #replace elements we want to change
theme(
#grid elements
axis.ticks = element_blank(),          #strip axis ticks
#text elements
plot.title = element_text(  #title
family = font,            #set font family
size = 16,                #set font size
face = 'bold',            #bold typeface
hjust = 0.5,              #center
vjust = 2),               #move title up
plot.subtitle = element_text(#subtitle
family = font,
size = 14),
plot.caption = element_text(#caption
family = font,
size = 9,
hjust = 1),               #right align
axis.title = element_text(  #axis titles
family = font),
axis.title.x = element_text(
hjust = 0.5, vjust = 4), #center
axis.text = element_text(   #axis text
family = font,
size = 9),
axis.text.x = element_text( #margin for axis text
margin=margin(5, b = 10),
vjust = 7.5),
strip.text = element_text(
size = 12, color = "black", face = "bold"
),
axis.line = element_blank(),
legend.position = 'bottom'
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha){
#' this function serves to draw stacked proportion barcharts  for the UFO AIM
#' year analysis, these serve to show the sample size, and binomial breakdown
#' within the sample such as mortality. it inherits it's aesthetics from a
#' custom theme developed for this purpose 'theme_prop_bar'
#'
#' Inputs :
#' data - a data frame containing all variables for the plot
#' response_val - a numerical response.
#' response_cat - a category for the response
#' group1 - relevant grouping variable - e.g. 'treatment'
#' group2 - variable to facet by, e.g. year
#' alpha - alpha value for p-value, defauts to 0.2 for CI of 80%
if(missing(alpha)) {
alpha = 0.2
}
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
group_by(!!grp1, !!grp2, !!response_cat) %>%
mutate(grp_total = sum(!!response_val)) %>%
add_count(name = 'no_obs') %>%
mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(spray, year, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = 1) +
geom_linerange(data = CInterval_upper,
aes(x=spray, ymin= pl_bar, ymax= pu_bar),
colour="black", alpha=0.9) +
geom_linerange(data = CInterval_lower,
aes(x=spray, ymin= ll_bar, ymax= lu_bar),
colour="black", alpha=0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
scale_fill_manual(values = c('dead' = '#91A4C3',
'live' = '#C3B091'))
return(myplot)
}
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
#' @export
#' @rdname UFO_EoS
theme_prop_bar <- function(){
font = "sans"   #assign font family up front
base_size = 12
legend.position = 'none'
theme_classic() %+replace%    #replace elements we want to change
theme(
#grid elements
axis.ticks = element_blank(),          #strip axis ticks
#text elements
plot.title = element_text(  #title
family = font,            #set font family
size = 16,                #set font size
face = 'bold',            #bold typeface
hjust = 0.5,              #center
vjust = 2),               #move title up
plot.subtitle = element_text(#subtitle
family = font,
size = 14),
plot.caption = element_text(#caption
family = font,
size = 9,
hjust = 1),               #right align
axis.title = element_text(  #axis titles
family = font),
axis.title.x = element_text(
hjust = 0.5, vjust = 4), #center
axis.text = element_text(   #axis text
family = font,
size = 9),
axis.text.x = element_text( #margin for axis text
margin=margin(5, b = 10),
vjust = 7.5),
strip.text = element_text(
size = 12, color = "black", face = "bold"
),
axis.line = element_blank(),
legend.position = 'bottom'
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha){
#' this function serves to draw stacked proportion barcharts  for the UFO AIM
#' year analysis, these serve to show the sample size, and binomial breakdown
#' within the sample such as mortality. it inherits it's aesthetics from a
#' custom theme developed for this purpose 'theme_prop_bar'
#'
#' Inputs :
#' data - a data frame containing all variables for the plot
#' response_val - a numerical response.
#' response_cat - a category for the response
#' group1 - relevant grouping variable - e.g. 'treatment'
#' group2 - variable to facet by, e.g. year
#' alpha - alpha value for p-value, defauts to 0.2 for CI of 80%
if(missing(alpha)) {
alpha = 0.2
}
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
group_by(!!grp1, !!grp2, !!response_cat) %>%
mutate(grp_total = sum(!!response_val)) %>%
add_count(name = 'no_obs') %>%
mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(spray, year, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = 1) +
geom_linerange(data = CInterval_upper,
aes(x=spray, ymin= pl_bar, ymax= pu_bar),
colour="black", alpha=0.9) +
geom_linerange(data = CInterval_lower,
aes(x=spray, ymin= ll_bar, ymax= lu_bar),
colour="black", alpha=0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
scale_fill_manual(values = c('dead' = '#91A4C3',
'live' = '#C3B091'))
return(myplot)
}
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
is <- InsectSprays %>%
mutate(
ID = 1:n(), .before = count) %>%
mutate(
year = rep(2021:2022, times = 6, each = 6),
dead = floor(runif(n(), min=0, max=count)),
live = count - dead) %>%
pivot_longer(cols = dead:live, values_to = 'tot_count', names_to = 'response')
stacked_prop_drawer(data = is, response_val = tot_count, response_cat = response,
grp1 = spray, grp2 = year) +
labs(title = 'simulated dataset mortality in insects')
library(sf)
states <- tigris::states() %>%
filter(STUSPS %in% c('CO', 'NM', 'UT'))
UFO_poly <- st_read(
paste0(here(), '/data/raw/BLM_CO_Administrative_Units/', 'admu_ofc_poly.shp'),
quiet = T) %>%
filter(ADMU_NAME == 'UNCOMPAHGRE FIELD OFFICE') %>%
st_transform(4269) %>%
dplyr::select(ADMU_NAME)
AIM_summaries <- read_sf('/media/sagesteppe/External HD/aimDB/summaries/TerrADat.shp') %>%
dplyr::select(PrimaryKey:State, County:Ecological, Latitude_N:Spp_ShortP, GlobalID) %>%
mutate(Ecological = replace_na(Ecological, 'UNKNOWN'))
AIM_summaries <- AIM_summaries[st_intersection(AIM_summaries, states),]
AIM_summaries <- read_sf('/media/sagesteppe/ExternalHD/aimDB/summaries/TerrADat.shp') %>%
dplyr::select(PrimaryKey:State, County:Ecological, Latitude_N:Spp_ShortP, GlobalID) %>%
mutate(Ecological = replace_na(Ecological, 'UNKNOWN'))
AIM_summaries <- AIM_summaries[st_intersection(AIM_summaries, states),]
AIM_summaries <- AIM_summaries %>%
st_join(., UFO_poly, join = st_intersects) %>%
mutate(ADMU_NAME = replace_na(ADMU_NAME, 'NOT')) %>%
mutate(UFO = if_else(ADMU_NAME == 'UNCOMPAHGRE FIELD OFFICE', 1, 0), .before = PlotKey) %>%
dplyr::select(-ADMU_NAME)
UFO_poly <- st_read(
paste0(here(), '/data/raw/BLM_CO_Administrative_Units/', 'admu_ofc_poly.shp'),
quiet = T) %>%
filter(ADMU_NAME == 'UNCOMPAHGRE FIELD OFFICE') %>%
st_transform(4269) %>%
dplyr::select(ADMU_NAME)
here()
UFO_poly <- st_read(
paste0(here(), '/data/raw/BLM_CO_Administrative_Units/', 'admu_ofc_poly.shp'),
quiet = T) %>%
filter(ADMU_NAME == 'UNCOMPAHGRE FIELD OFFICE') %>%
st_transform(4269) %>%
dplyr::select(ADMU_NAME)
