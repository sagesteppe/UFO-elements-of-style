type <- type[1]
removed_grps <- data.frame(Type = type, Subpopulation = all_grps) # which var did we crash on!??
return(removed_grps) ; stop()
} else if(length(grps2keep) > 0) { # remove groups which cannot be calculated by the
removed_grps <- setdiff(all_grps, grps2keep) %>%  # we will also save
data.frame(Subpopulation = .) # them out into a single row dataframe to
x <- filter(x, !!sym(grp_var1) %in% grps2keep) # bind the values back on so
}
if(nrow(x) > 1){ # calculate our data which we can.
return_vals <- cont_analysis(dframe = x, statistics = 'Pct', vars = variables,
subpops = as.character(substitute(grp_var1)), ...)
return_vals <- return_vals[['Pct']]
} else {
return('water')
}
if(exists('removed_grps')){
return_vals <- bind_rows(return_vals, removed_grps) %>%
fill(Type, .direction = "down") %>%
fill(Indicator, .direction = 'down')
rownames(return_vals) <- NULL
}
return(return_vals)
}
contVarsInter <- vector(mode = 'list', length = length(contVars2Calc))
for (i in seq(contVars2Calc)){
contVarsInter[[i]] <- prcnt_meeting(x = sum1, grp_var1 = 'Veg_type',  variables = contVars2Calc[i],
pctval = c(70, 80), conf = 80 )
}
View(contVarsInter)
contVarsInter[[21]][["Indicator"]]
#' This function wraps around cont_analysis and will truncate those groups from
#' analysis, and append rows indicating that this operation was performed.
#'
#' @param x a dataframe or sf tibble
#' @param grp_var1 one level of grouping variables - required
#' @param variables the variables which you are going to compute - see example.
#' @param ... additional arguments passed onto cont analysis e.g. pctval, cols holding coords
#'
#' @example This function will applied as a for-loop to understand when are where it fails.
#'
prcnt_meeting <- function(x, grp_var1, variables, ...){
# determine which groups have enough values > 0 for interpolation
all_grps <- distinct(x, !!sym(grp_var1)) %>% pull()
grps2keep <- x %>%
group_by(!!sym(grp_var1)) %>%
drop_na(!!sym(variables)) %>%
filter(!!sym(variables) > 0) %>%
mutate(Records = n()) %>%
filter(Records > 2) %>%
distinct(!!sym(grp_var1)) %>%
pull(!!sym(grp_var1))
if (length(grps2keep) == 0) {
type <- select(x, !!sym(grp_var1)) %>% colnames() ; type <- type[1]
indi <- select(x, v!!sym(ariables)) %>% colnames() ; indi <- indi[1]
#' This function wraps around cont_analysis and will truncate those groups from
#' analysis, and append rows indicating that this operation was performed.
#'
#' @param x a dataframe or sf tibble
#' @param grp_var1 one level of grouping variables - required
#' @param variables the variables which you are going to compute - see example.
#' @param ... additional arguments passed onto cont analysis e.g. pctval, cols holding coords
#'
#' @example This function will applied as a for-loop to understand when are where it fails.
#'
prcnt_meeting <- function(x, grp_var1, variables, ...){
# determine which groups have enough values > 0 for interpolation
all_grps <- distinct(x, !!sym(grp_var1)) %>% pull()
grps2keep <- x %>%
group_by(!!sym(grp_var1)) %>%
drop_na(!!sym(variables)) %>%
filter(!!sym(variables) > 0) %>%
mutate(Records = n()) %>%
filter(Records > 2) %>%
distinct(!!sym(grp_var1)) %>%
pull(!!sym(grp_var1))
if (length(grps2keep) == 0) {
type <- select(x, !!sym(grp_var1)) %>% colnames() ; type <- type[1]
indi <- select(x, !!sym(ariables)) %>% colnames() ; indi <- indi[1]
removed_grps <- data.frame(Type = type, Subpopulation = all_grps, Indicator = indi) # which var did we crash on!??
return(removed_grps) ; stop()
} else if(length(grps2keep) > 0) { # remove groups which cannot be calculated by the
removed_grps <- setdiff(all_grps, grps2keep) %>%  # we will also save
data.frame(Subpopulation = .) # them out into a single row dataframe to
x <- filter(x, !!sym(grp_var1) %in% grps2keep) # bind the values back on so
}
if(nrow(x) > 1){ # calculate our data which we can.
return_vals <- cont_analysis(dframe = x, statistics = 'Pct', vars = variables,
subpops = as.character(substitute(grp_var1)), ...)
return_vals <- return_vals[['Pct']]
} else {
return('water')
}
if(exists('removed_grps')){
return_vals <- bind_rows(return_vals, removed_grps) %>%
fill(Type, .direction = "down") %>%
fill(Indicator, .direction = 'down')
rownames(return_vals) <- NULL
}
return(return_vals)
}
contVarsInter <- vector(mode = 'list', length = length(contVars2Calc))
for (i in seq(contVars2Calc)){
contVarsInter[[i]] <- prcnt_meeting(x = sum1, grp_var1 = 'Veg_type',  variables = contVars2Calc[i],
pctval = c(70, 80), conf = 80 )
}
#' This function wraps around cont_analysis and will truncate those groups from
#' analysis, and append rows indicating that this operation was performed.
#'
#' @param x a dataframe or sf tibble
#' @param grp_var1 one level of grouping variables - required
#' @param variables the variables which you are going to compute - see example.
#' @param ... additional arguments passed onto cont analysis e.g. pctval, cols holding coords
#'
#' @example This function will applied as a for-loop to understand when are where it fails.
#'
prcnt_meeting <- function(x, grp_var1, variables, ...){
# determine which groups have enough values > 0 for interpolation
all_grps <- distinct(x, !!sym(grp_var1)) %>% pull()
grps2keep <- x %>%
group_by(!!sym(grp_var1)) %>%
drop_na(!!sym(variables)) %>%
filter(!!sym(variables) > 0) %>%
mutate(Records = n()) %>%
filter(Records > 2) %>%
distinct(!!sym(grp_var1)) %>%
pull(!!sym(grp_var1))
if (length(grps2keep) == 0) {
type <- select(x, !!sym(grp_var1)) %>% colnames() ; type <- type[1]
indi <- select(x, !!sym(variables)) %>% colnames() ; indi <- indi[1]
removed_grps <- data.frame(Type = type, Subpopulation = all_grps, Indicator = indi) # which var did we crash on!??
return(removed_grps) ; stop()
} else if(length(grps2keep) > 0) { # remove groups which cannot be calculated by the
removed_grps <- setdiff(all_grps, grps2keep) %>%  # we will also save
data.frame(Subpopulation = .) # them out into a single row dataframe to
x <- filter(x, !!sym(grp_var1) %in% grps2keep) # bind the values back on so
}
if(nrow(x) > 1){ # calculate our data which we can.
return_vals <- cont_analysis(dframe = x, statistics = 'Pct', vars = variables,
subpops = as.character(substitute(grp_var1)), ...)
return_vals <- return_vals[['Pct']]
} else {
return('water')
}
if(exists('removed_grps')){
return_vals <- bind_rows(return_vals, removed_grps) %>%
fill(Type, .direction = "down") %>%
fill(Indicator, .direction = 'down')
rownames(return_vals) <- NULL
}
return(return_vals)
}
contVarsInter <- vector(mode = 'list', length = length(contVars2Calc))
for (i in seq(contVars2Calc)){
contVarsInter[[i]] <- prcnt_meeting(x = sum1, grp_var1 = 'Veg_type',  variables = contVars2Calc[i],
pctval = c(70, 80), conf = 80 )
}
View(contVarsInter)
View(contVarsInter)
bind_rows(contVarsInter)
rm(i, contVars2Calc)
rm(i, contVars2Calc, error_vec)
source('functions.R')
shhh <- suppressPackageStartupMessages
shhh(library(tidyverse))
shhh(library(terra))
shhh(library(sf))
shhh(library(here))
set.seed(72)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
strata_pal <- setNames(
c('#4A5A28', '#ADB1B9', '#CEB88E', '#574039', '#B64841',
'#1357a6', '#1B1212', '#F9E076', '#39993A', '#00688B'),
c('PJ', 'SS', 'SD', 'MMS', 'AS', 'RI', 'OT', 'GR', 'PP', 'MC')
)
stats <- c("mean", "variance", 'homogeneity', 'contrast', 'dissimilarity')
wind <- c(5, 5)
random <- file.path('../data/processed/',
list.files('../data/processed/',  pattern = '*Random*'))
reg <- file.path('../data/processed/',
list.files('../data/processed/',  pattern = '*Regular*'))
twenty22 <- read.csv('../data/processed/UFO_2022_AIM_CLASSIFIED.csv')
historicVeg <- read.csv('../data/processed/UFO_Veg_monitoring_CLASSIFIED.csv') %>%
na_if("")
plot_drawn <- (nrow(twenty22) + nrow(historicVeg))
plot_class <- bind_rows(twenty22, historicVeg) %>% drop_na()
reg_drawn <- do.call(rbind, lapply(reg, function(x)
read.csv(x, stringsAsFactors = FALSE)))
reg_pts <- reg_drawn %>%
drop_na() %>%
filter(VegClass %in% c('AS', 'MC', 'PJ', 'SD', 'SS', 'MMS'))
random_drawn <- do.call(rbind, lapply(random, function(x)
read.csv(x, stringsAsFactors = FALSE))) %>%
na_if("")
random_pts <- random_drawn %>% drop_na()
rm(random, twenty22, historicVeg)
p <- file.path(here::here(), 'data/processed')
reg_pts <-  reg_pts %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Regular', .after = 'ID') %>%
mutate(ID = as.character(ID)) %>%
st_transform(26912) %>%
st_buffer(30)
random_pts <- random_pts %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Random2', .after = 'ID') %>%
st_transform(26912) %>%
st_buffer(30) %>%
mutate(ID = as.character(ID)) %>%
mutate(across(where(is.character), ~na_if(., ""))) %>%
filter(VegClass %in% c('PJ', 'SD', 'SS', 'MMS'))
veg_pts <- plot_class %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Stratified', .after = 'ID') %>%
st_transform(26912) %>%
st_buffer(30) %>%
mutate(ID = as.character(ID))
# AIM DATA post K-Means is read in here
#veg_pts <- st_read(file.path(p, '/reclassified_AIM/reclassified_AIM.shp'), quiet = T) %>%
#  st_transform(26912) %>%  # these alreday buffered by type.
#  rename(ID = PlotKey, Type = Plot, VegClass = Veg_type) %>%
#  bind_rows(., computer_pts) %>%
#  drop_na() %>%
#  vect()
# alt route use the manually classified
veg_pts <- bind_rows(veg_pts, random_pts, reg_pts) %>%
as(., "Spatial") %>%
vect()
rm(reg_pts, random_pts, plot_drawn, random_drawn, reg_drawn)
toString(nrow(veg_pts))
cmRestrat <- caret::confusionMatrix(test_prediction, test$class)
prds <- '/media/sagesteppe/ExternalHD/plot_post_stratification/results/stats'
veg_rf_model <- readRDS(file = file.path(prds, 'RandomForest2022-10-31.rds'))
test$class <- as.factor(test$class)
prds <- '../results/stats'
veg_rf_model <- readRDS(file = file.path(prds, 'RandomForest2022-10-31.rds'))
test$class <- as.factor(test$class)
View(veg_rf_model)
data.frame(randomForest::importance(veg_rf_model, type = 2))# %>% # modifies in place!!! OOP :-) BUT assigned to deal with markdown.
test_prediction <- predict(veg_rf_model, test)
test <- read.csv(file.path('../data/processed/', 'rf_testing_data.csv'))
test$class <- as.factor(test$class)
data.frame(randomForest::importance(veg_rf_model, type = 2))# %>% # modifies in place!!! OOP :-) BUT assigned to deal with markdown.
test_prediction <- predict(veg_rf_model, test)
cmRestrat <- caret::confusionMatrix(test_prediction, test$class)
rm(test_prediction, train_prop, test, prds, classes)
citation('parallel')
#' @export
#' @rdname UFO_EoS
theme_boxplot <- function(){
font = "sans"   #assign font family up front
base_size = 10
legend.position = 'none'
theme_classic() %+replace%    #replace elements we want to change
theme(
#grid elements
axis.ticks = element_blank(),          #strip axis ticks
#text elements
plot.title = element_text(             #title
family = font,            #set font family
size = 12,                #set font size
face = 'bold',            #bold typeface
hjust = 0.5,                #left align
vjust = 3
),
plot.subtitle = element_text(          #subtitle
family = font,            #font family
size = 11),               #font size
plot.caption = element_text(  #caption
family = font,            #font family
size = 9,                 #font size
hjust = 1),               #right align
axis.title = element_text(  #axis titles
family = font),
axis.text = element_text(              #axis text
family = font,            #axis famuly
size = 8),                #font size
axis.text.x = element_text(            #margin for axis text
margin=margin(5, b = 10)),
axis.line = element_line(
colour = "grey25", linetype=3)
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
#' @param col_pal - color palette e.g. 'strata_pal', or 'lifeform_pal'
#' @param group - relevant grouping variables - expects character categorical
#' @return a ggplot with the option to refine contents.
#' @example strata_pal_test <- c("setosa" = "#4A5A28",
#' "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
#' iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
#'                     group = Species, col_pal = strata_pal_test)
#' plot(iris_box) + labs(title = 'Comparision of Sepal Length in Iris Species')
#' @export
#' @seealso theme_boxplot
boxplot_drawer <- function(df, response, col_pal, group){
term <- as.formula(paste(rlang::enexpr(response), ' ~ ', dplyr::enexpr(group)))
response <- rlang::enquo(response)
group <- rlang::enquo(group)
my_means <- ggpubr::compare_means(term,  data = df)
my_comparisons <- my_means %>%
nest(groups = c(group1, group2)) %>%
pull(groups) %>%
map(., as.character)
min_v <- dplyr::summarise(df, mean_mpg = floor(min(!!response))) |> pull()
sample_sizes <- df %>%
dplyr::group_by(!!group) %>%
dplyr::tally() %>%
dplyr::mutate(n = paste0('n = ', n))
ufo_boxplot <- ggplot(df, aes(x = !!group, y = !!response, colour = !!group),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = 1, outlier.alpha = 0.8, outlier.colour = 'black') +
geom_text(data = sample_sizes,
aes(!!group, Inf, label = n), color = 'black',
vjust = "inward", size = 9,
y = min_v * 0.95) +
ggpubr::stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25, size = 9) +
ggpubr::stat_compare_means(label.y = min_v * 0.85, size = 9)  +
theme_boxplot() +
scale_colour_manual(values = col_pal) +
theme(legend.position = 'none')
return(ufo_boxplot)
}
strata_pal_test <- c("setosa" = "#4A5A28", "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
group = Species, col_pal = strata_pal_test)
iris_box <- plot(iris_box) + labs(title = 'Sepal Length in Iris')
ggsave(iris_box, path = '../results/plots/', filename = 'boxplot_drawer.png', width = 720, height = 720,
units = 'px', device = 'png', bg = 'trans')
#'     response_cat = response,
#'     grp1 = spray, grp2 = year,
#'     rowN = 2,
#'     fill_vals =  c('dead', 'live'),
#'     fill_cols = c('#91A4C3', '#C3B091')) +
#'     labs(title = 'Effect of Insecticides on Insect Mortality') # note you
#'     # can just add elements onto the function in line.
#'
#' @export
#' @rdname UFO_EoS
stacked_prop_drawer <- function(data, response_val, response_cat, grp1, grp2,
alpha, fill_vals, fill_cols, rowN){
if(missing(alpha)) {
alpha = 0.2
}
names(fill_cols) <- fill_vals
response_val <- enquo(response_val)
response_cat <- enquo(response_cat)
grp1 <- enquo(grp1)
grp2 <- enquo(grp2)
CInterval <- data %>%
dplyr::group_by(!!grp1, !!grp2, !!response_cat) %>%
dplyr::mutate(grp_total = sum(!!response_val)) %>%
dplyr::add_count(name = 'no_obs') %>%
dplyr::mutate(
t = qt((1-alpha)/2 + .5, n()-1),
se = sd(!!response_val) / sqrt(no_obs),
CI = t*se) %>%
distinct(!!grp1, !!grp2, !!response_cat, .keep_all = T) %>%
select(!!grp1, !!grp2, !!response_cat, CI, grp_total, !!response_val)
# Confidence interval generation
ordered_responses <- distinct(data, !!response_cat) %>% pull()
CInterval_upper <- CInterval %>%
ungroup(!!response_cat) %>%
mutate(grp_total = sum(grp_total),
pl_bar = grp_total - CI,
pu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[1])
CInterval_lower <- CInterval %>%
mutate(grp_total = sum(grp_total),
ll_bar = grp_total - CI,
lu_bar = grp_total + CI) %>%
filter(!!response_cat == ordered_responses[2])
# style the labels
#  data <- data %>%
#    dplyr::mutate(dplyr::across(.cols = c(!!response_cat,
#                                          !!grp1, !!grp2), ~ str_to_sentence(.x)))
myplot <- ggplot(data, aes(y = !!response_val, x = !!grp1, fill = !!response_cat)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(vars(!!grp2), nrow = rowN) +
geom_linerange(data = CInterval_upper,
aes(x = !!grp1, ymin = pl_bar, ymax = pu_bar),
colour="black", alpha = 0.9) +
geom_linerange(data = CInterval_lower,
aes(x = !!grp1, ymin = ll_bar, ymax = lu_bar),
colour="black", alpha = 0.9) +
theme_prop_bar() +
theme(strip.background = element_blank() ) +
scale_fill_manual(values = fill_cols)
return(myplot)
}
library(tidyverse)
#' @param col_pal - color palette e.g. 'strata_pal', or 'lifeform_pal'
#' @param group - relevant grouping variables - expects character categorical
#' @return a ggplot with the option to refine contents.
#' @example strata_pal_test <- c("setosa" = "#4A5A28",
#' "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
#' iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
#'                     group = Species, col_pal = strata_pal_test)
#' plot(iris_box) + labs(title = 'Comparision of Sepal Length in Iris Species')
#' @export
#' @seealso theme_boxplot
boxplot_drawer <- function(df, response, col_pal, group){
term <- as.formula(paste(rlang::enexpr(response), ' ~ ', dplyr::enexpr(group)))
response <- rlang::enquo(response)
group <- rlang::enquo(group)
my_means <- ggpubr::compare_means(term,  data = df)
my_comparisons <- my_means %>%
nest(groups = c(group1, group2)) %>%
pull(groups) %>%
map(., as.character)
min_v <- dplyr::summarise(df, mean_mpg = floor(min(!!response))) |> pull()
sample_sizes <- df %>%
dplyr::group_by(!!group) %>%
dplyr::tally() %>%
dplyr::mutate(n = paste0('n = ', n))
ufo_boxplot <- ggplot(df, aes(x = !!group, y = !!response, colour = !!group),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = 1, outlier.alpha = 0.8, outlier.colour = 'black') +
geom_text(data = sample_sizes,
aes(!!group, Inf, label = n), color = 'black',
vjust = "inward", size = 9,
y = min_v * 0.95) +
ggpubr::stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25, size = 9) +
ggpubr::stat_compare_means(label.y = min_v * 0.85, size = 9)  +
theme_boxplot() +
scale_colour_manual(values = col_pal) +
theme(legend.position = 'none')
return(ufo_boxplot)
}
strata_pal_test <- c("setosa" = "#4A5A28", "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
group = Species, col_pal = strata_pal_test)
iris_box <- plot(iris_box) + labs(title = 'Sepal Length in Iris')
ggsave(iris_box, path = '../results/plots/', filename = 'boxplot_drawer.png', width = 720, height = 720,
units = 'px', device = 'png', bg = 'trans')
ggsave(iris_box, path = '../results/plots/', filename = 'boxplot_drawer.png', width = 720, height = 720,
units = 'px', device = 'png', bg = 'transparent')
setwd('/media/sagesteppe/ExternalHD/UFO_elements_of_style/scripts')
ggsave(iris_box, path = '../results/plots/', filename = 'boxplot_drawer.png', width = 720, height = 720,
units = 'px', device = 'png', bg = 'transparent')
getwd()
ggsave(iris_box, path = '../results/plots/',
filename = 'boxplot_drawer.png', width = 720, height = 720,  units = 'px', device = 'png', bg = 'transparent')
#' @param col_pal - color palette e.g. 'strata_pal', or 'lifeform_pal'
#' @param group - relevant grouping variables - expects character categorical
#' @return a ggplot with the option to refine contents.
#' @example strata_pal_test <- c("setosa" = "#4A5A28",
#' "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
#' iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
#'                     group = Species, col_pal = strata_pal_test)
#' plot(iris_box) + labs(title = 'Comparision of Sepal Length in Iris Species')
#' @export
#' @seealso theme_boxplot
boxplot_drawer <- function(df, response, col_pal, group){
term <- as.formula(paste(rlang::enexpr(response), ' ~ ', dplyr::enexpr(group)))
response <- rlang::enquo(response)
group <- rlang::enquo(group)
my_means <- ggpubr::compare_means(term,  data = df)
my_comparisons <- my_means %>%
nest(groups = c(group1, group2)) %>%
pull(groups) %>%
map(., as.character)
min_v <- dplyr::summarise(df, mean_mpg = floor(min(!!response))) |> pull()
sample_sizes <- df %>%
dplyr::group_by(!!group) %>%
dplyr::tally() %>%
dplyr::mutate(n = paste0('n = ', n))
ufo_boxplot <- ggplot(df, aes(x = !!group, y = !!response, colour = !!group),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = 1, outlier.alpha = 0.8, outlier.colour = 'black') +
geom_text(data = sample_sizes,
aes(!!group, Inf, label = n), color = 'black',
vjust = "inward", size = 2,
y = min_v * 0.95) +
ggpubr::stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25, size = 2) +
ggpubr::stat_compare_means(label.y = min_v * 0.85, size = 2)  +
theme_boxplot() +
scale_colour_manual(values = col_pal) +
theme(legend.position = 'none')
return(ufo_boxplot)
}
strata_pal_test <- c("setosa" = "#4A5A28", "versicolor" = "#ADB1B9", "virginica" = "#CEB88E")
iris_box <- boxplot_drawer(df = iris, response = Sepal.Length,
group = Species, col_pal = strata_pal_test)
iris_box <- plot(iris_box) + labs(title = 'Sepal Length in Iris')
ggsave(iris_box, path = '../results/plots/',
filename = 'boxplot_drawer.png', width = 720, height = 720,  units = 'px', device = 'png', bg = 'transparent')
iris_box <- plot(iris_box) + labs(title = 'Sepal Length in Iris') +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
ggsave(iris_box, path = '../results/plots/',
filename = 'boxplot_drawer.png', width = 720, height = 720,  units = 'px', device = 'png', bg = 'transparent')
